{
	"pytorch-run": {
		"prefix": "pytorch-run",
		"body": [
			"",
			"",
			"import argparse",
			"import torch",
			"",
			"",
			"def init_torch(seed: int) -> None:",
			"    \"\"\" Initialise torch with a seed \"\"\"",
			"    torch.manual_seed(seed)",
			"    torch.backends.cudnn.deterministic = True",
			"",
			"",
			"def main() -> None:",
			"    \"\"\" Run the main experiment \"\"\"",
			"    parser = argparse.ArgumentParser()",
			"    parser.add_argument(\"-s\", \"--seed\", type=int, default=1234,",
			"                        help=\"seed for initializing pytorch\")",
			"    args = parser.parse_args()",
			"",
			"    # Initialize pytorch",
			"    init_torch(args.seed)",
			"",
			"",
			"if __name__ == \"__main__\":",
            "    main()",
            ""
		],
		"description": "Pytorch run script template"
	},
	"main": {
		"prefix": "main",
		"body": [
			"def main() -> None:",
			"    \"\"\" Entry point for the program \"\"\"",
			"    pass",
			"",
			"if __name__ == \"__main__\":",
            "    main()",
            ""
		],
		"description": "default main"
	}
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}