* Emacs Org Configuration
* Description
This file is parsed by [[./init.el][init.el]] which then evaluates all
=emacs-lisp= code blocks during startup.

This configuration is designed for Emacs 24.5 and above.

** Basic Directory Structure
#+begin_src text
  └── emacs.d
      ├── init.el
      ├── README.org  # this file
      ├── packages/   # directory for non ELPA / MELPA packages
      └── backups/    # emacs generated backup files
#+end_src

* Credits
This =emacs.d/= was heavily inspired by the following configurations:

- [[https://github.com/anschwa/emacs.d][Adam Schwartz' emacs.d]]
- [[https://github.com/belak/dotfiles/tree/master/emacs.d][Kaleb Elwert's emacs.d]]

* Prerequisites
** Mac OS X
*** Xcode Command Line Tools
Either get Xcode and enable Command Line Tools, or get them directly from
[[http://developer.apple.com/downloads][here.]] Alternatively, open a Terminal
window and enter =xcode-select --install= to get the CLI tools.

*** Homebrew
Install Homebrew for OS X
#+begin_src sh
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+end_src
Review and check warnings / errors with =brew doctor=.

*** Git
Install Git.
#+begin_src sh
brew update
brew install git
#+end_src

** Ubuntu
*** The Build Essential package
#+begin_src sh
sudo apt update
sudo apt install build-essential
#+end_src

* Installing Emacs
** Mac OS X
*** Homebrew Cask
The new way of installing Emacs is to use Homebrew Cask
#+begin_src sh
brew cask install emacs
#+end_src

I use Mitsuharu Yamamoto's "Mac port" which can be installed using Cask as well
#+begin_src sh
brew tap railwaycat/emacsmacport
brew cask install emacs-mac
#+end_src

** Ubuntu
Emacs is available through the package manager; the version might not be the
most up-to-date, however.
#+begin_src sh
sudo apt install emacs
#+end_src

* Starting Emacs
Start Emacs with a specific init file:
#+begin_src sh
emacs -q -l ~/my-init-file.el
#+end_src

* Identification and Location
I use the location information to toggle dark and light theme variants and don't
like hardcoded values
#+begin_src emacs-lisp
  (setq user-full-name "Chirag Raman"
        user-mail-address "chirag.raman@gmail.com")
  (defvar craman/current_latitude 40.4)
  (defvar craman/current_longitude -80)
#+end_src

* Package Setup
Load package.el and do our best to make sure we don’t automatically load
everything we have installed.
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa"  . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org"    . "http://orgmode.org/elpa/") t)
  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

Add custom packages directory to the =load-path=.
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "packages/"))
#+end_src

This block simply defines a few helpers. =craman/ensure-refreshed= will
run a refresh if the package list hasn't been refreshed this
session. =craman/package-ensure-installed= will ensure the package list
has been refreshed and try to install the package if it hasn't been
installed already.

#+begin_src emacs-lisp
  (defvar craman/refreshed-package-list nil
    "This will be t if the package list has been refreshed.")

  (defun craman/ensure-refreshed ()
    "Ensure the package list has been refreshed this startup."
    (unless craman/refreshed-package-list
      (package-refresh-contents)
      (setq craman/refreshed-package-list t)))

  (defun craman/package-ensure-installed (package)
    "Install a missing PACKAGE if it isn't already."
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

Now that we have some helpers defined, we wrap package-install to make
sure that the first install of each session will refresh the package
list.

#+begin_src emacs-lisp
  (advice-add 'package-install
              :before
              (lambda (&rest args)
                (craman/ensure-refreshed)))
#+end_src

** Core Packages

Portions of this config depend on other components, so we load the common
components here. The only things which should be here are packages which are
needed for the organization of the rest of the file and stuff which needs to be
loaded very early.

*** use-package (and =general=)
[[https://github.com/jwiegley/use-package][use-package]] is a wrapper around
package loading. We install it as early as possible so we can use it when
installing everything else..

#+begin_src emacs-lisp
  (craman/package-ensure-installed 'use-package)
  (eval-when-compile
    (defvar use-package-verbose t)
    (require 'use-package))

  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)                ;; if you use any :bind variant
#+end_src

Always attempt to install packages unless we specify otherwise.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

We also load =general= here, as this integrates with =use-package= for
better key bind settings.

#+begin_src emacs-lisp
  (craman/package-ensure-installed 'general)
  (require 'general)
#+end_src

*** ==auto-compile==

Enable auto-compile and avoid loading outdated files

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+end_src

*** =page-break-lines=

Display a line as opposed to ^L. This is early in the config file so
most bootstrapped package logs will take advantage of this.

#+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish page-break-lines-mode
    :config (global-page-break-lines-mode 1))
#+end_src

*** =solarized-theme= (and =circadian=)
I love the [[http://ethanschoonover.com/solarized][Solarized theme by Ethan Schoonover]].

#+begin_src emacs-lisp
  (craman/package-ensure-installed 'solarized-theme)
  (use-package solarized-theme
    :ensure t
    :defer
    :config
    (setq solarized-use-variable-pitch nil
          solarized-distinct-fringe-background t
          solarized-scale-org-headlines nils)
#+end_src

[[https://github.com/guidoschmidt/circadian.el][Circadian]] is a great package
for switching between themes based on daytime. I use it to switch between the
dark and light variants of Solarized.

#+begin_src emacs-lisp
  (craman/package-ensure-installed 'circadian)
  (use-package circadian
  :ensure t
  :config
  (setq calendar-latitude craman/current_latitude)
  (setq calendar-longitude craman/current_longitude)
  (setq circadian-themes '((:sunrise . solarized-dark)
                           (:sunset  . solarized-light)))
  (circadian-setup))
#+end_src

* Essentials
Some quick essentials.
#+begin_src emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display.
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; No splash screen please.
  (setq inhibit-startup-message t)

  ;; No fascists.
  (setq initial-scratch-message nil)

  ;; Productive default mode
  (setq initial-major-mode 'org-mode)

  ;; No alarms.
  (setq ring-bell-function 'ignore)

  ;; When on a tab, make the cursor the tab length.
  (setq-default x-stretch-cursor t)

  ;; Keep emacs Custom-settings in separate file.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))

  ;; Make backups of files, even when they're in version control.
  (setq vc-make-backup-files t)

  ;; Save point position between sessions.
  (use-package saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "places" user-emacs-directory))

  ;; Fix empty pasteboard error.
  (setq save-interprogram-paste-before-kill nil)

  ;; Enable some commands.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
#+end_src

* Better Defaults
Better Emacs Default Settings. Heavily influenced from Magnar's
[[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][sane-defaults.el]].

#+begin_src emacs-lisp
  ;; Ido, Yes!
  (use-package ido
               :config
               (ido-mode t)
               (setq ido-enable-flex-matching t))

  ;; Full path in frame title
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

  ;; Auto refresh buffers when edits occur outside emacs
  (global-auto-revert-mode 1)

  ;; Also auto refresh Dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  ;; Quickly copy/move file in Dired
  (setq dired-dwim-target t)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Show matching parens
  (setq show-paren-delay 0)
  (show-paren-mode 1)

  ;; Auto-close brackets and double quotes
  (electric-pair-mode 1)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 80 characters wide, not 72
  (setq fill-column 80)

  ;; Smooth Scroll:
  (setq mouse-wheel-scroll-amount '(1 ((shift) .1))) ;; one line at a time

  ;; Scroll one line when hitting bottom of window
  (setq scroll-conservatively 10000)

  ;; Change Cursor
  (setq-default cursor-type 'box)
  (blink-cursor-mode -1)

  ;; Remove alarm (bell) on scroll
  (setq ring-bell-function 'ignore)

  ;; Set default tab width
  (setq default-tab-width 4)

  ;; Never insert tabs
  (set-default 'indent-tabs-mode nil)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; Word Wrap (t is no wrap, nil is wrap)
  (setq-default truncate-lines nil)

  ;; Sentences do not need double spaces to end. Period.
  (set-default 'sentence-end-double-space nil)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Add parts of each file's directory to the buffer name if not unique
  (use-package uniquify
               :config
               (setq uniquify-buffer-name-style 'forward))

  ;; eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  ;; from 'better-defaults.el'
  ;; Allow clipboard from outside emacs
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t)

#+end_src

* Keybindings
#+BEGIN_QUOTE
There are a number of ways to bind keys in Emacs, but I find
=bind-key=, bundled with =use-package=, easier to work with and,
more importantly, easier to read. =bind-key= takes a key sequence, a
command, and an optional keymap.  =bind-key*= overrides any minor
mode which sets the keybinding. =unbind-key= takes a key sequence
and a keymap and removes that binding. Invoking
=describe-personal-keybindings= prints a summary of your keybindings
through =bind-key= and any overrides or conflicts. This is really
the killer convenience of using =bind-key=.
#+END_QUOTE

** Exiting
I don't like to quit Emacs on accident, and I find closing frames more useful.

#+begin_src emacs-lisp
  ;; The mnemonic is C-x REALLY QUIT
  (bind-key "C-x r q" 'save-buffers-kill-terminal)
  (bind-key "C-x C-c" 'delete-frame)
#+end_src

** Improvements
#+begin_src emacs-lisp
  ;; Home and End Keys:
  (bind-key "<home>" 'move-beginning-of-line)
  (bind-key "<end>" 'move-end-of-line)

  ;; From 'better-defaults.el'
  (bind-keys*
   ("M-/" . hippie-expand)
   ("C-s" . isearch-forward-regexp)
   ("C-r" . isearch-backward-regexp)
   ("C-M-s" . isearch-forward)
   ("C-M-r" . isearch-backward))
   ("C-x C-b" . ibuffer)
   ("M-z" . zap-up-to-char))

  ;; Completion that uses many different methods to find options.
  (bind-key "C-." 'hippie-expand-no-case-fold)
  (bind-key "C-:" 'hippie-expand-lines)
  (bind-key "C-," 'completion-at-point)

  ;; Set Regexp Alignment
  (bind-key "C-x a r" 'align-regexp)

  ;; Joins Lines into one (from the bottom up)
  (bind-key  "M-j" '(lambda () (interactive) (join-line -1)))

  ;; Kill line from the left
  (bind-key "<s-backspace>" '(lambda () (interactive) (kill-line 0)))
#+end_src

** Unbind keys
Sometimes there are system keybindings that get in the way and will be used
later.

#+begin_src emacs-lisp
  (dolist (keys '("<M-up>" "<M-down>" "<s-left>" "<s-right>"
                  "s-c" "s-v" "s-x" "s-v" "s-q" "s-s" "s-w"
                  "s-a" "s-o" "s-n" "s-p" "s-k" "s-u" "s-m"
                  "s-f" "s-z" "s-g" "s-d" "s-," "s-:" "s-e"
                  "s-t" "C-z"))
  (global-unset-key (kbd keys)))
#+end_src

* Appearance

** Pretty Mode
Display certain characters as Unicode symbols.
#+begin_src emacs-lisp
  ;; Base set of pretty symbols.
  (defvar base-prettify-symbols-alist '(("<=" . ?≤)
                                        (">=" . ?≥)
                                        ("<-" . ?←)
                                        ("->" . ?→)
                                        ("<=" . ?⇐)
                                        ("=>" . craman/
                                        ("lambda" . ?λ)))


  (defun craman/lisp-prettify-symbols-hook ()
    "Set pretty symbols for lisp modes."
    (setq prettify-symbols-alist base-prettify-symbols-alist))

  (defun craman/js-prettify-symbols-hook ()
    "Set pretty symbols for JavaScript."
    (setq prettify-symbols-alist
          (append '(("function" . ?ƒ)) base-prettify-symbols-alist)))

  (defun craman/prettify-symbols-hook ()
    "Set pretty symbols for non-lisp programming modes."
    (setq prettify-symbols-alist
          (append '(("==" . ?≡)
                    ("!=" . ?≠)) base-prettify-symbols-alist)))

  ;; Hook 'em up.
  (add-hook 'emacs-lisp-mode-hook 'craman/lisp-prettify-symbols-hook)
  (add-hook 'web-mode-hook 'craman/prettify-symbols-hook)
  (add-hook 'js-mode-hook 'craman/js-prettify-symbols-hook)
  (add-hook 'prog-mode-hook 'craman/prettify-symbols-hook)

  (global-prettify-symbols-mode 1)
#+end_src

** Windows
#+begin_src emacs-lisp
  ;; window resizing
  (bind-key "M-s-<left>" 'shrink-window-horizontally)
  (bind-key "M-s-<right>" 'enlarge-window-horizontally)
  (bind-key "M-s-<down>" 'shrink-window)
  (bind-key "M-s-<up>" 'enlarge-window)

  (bind-key "M-0" 'delete-window)
  (bind-key "M-1" 'delete-other-windows)
  (bind-key "M-2" 'split-window-horizontally)
  (bind-key "M-3" 'split-window-vertically)
  (bind-key "M-4" 'kill-buffer-and-window)
  (bind-key "M-=" 'balance-windows)
#+end_src

** Mode Line
*** Date
Display the date on the mode line.
#+begin_src emacs-lisp
(setq display-time-day-and-date t
                display-time-format "%a %b %d %R"
                display-time-interval 60
                display-time-default-load-average nil)
             (display-time)
#+end_src
*** Battery
#+begin_src emacs-lisp
  (setq battery-mode-line-format " [%b%p%%|%t]")
  (display-battery-mode t)
#+end_src

** Other
Don't defer screen updates when performing operations
#+begin_src emacs-lisp
  (setq redisplay-dont-pause t)
#+end_src

* Major Modes
** C-Family
#+begin_src emacs-lisp
  ;; Use One True Brace Style (K&R style indentation)
  (setq c-default-style "k&r"
        c-basic-offset 4)

  ;; Use C-Mode for CUDA
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c-mode))
#+end_src

** Python

Jedi gives us intelligent auto-completion for Python in Emacs.

1. =M-x package-install RET jedi RET=
2. =M-x jedi:install-server RET=

#+begin_src emacs-lisp
  ;; Standard Jedi.el setting
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)

  ;; Use Company for auto-completion interface.
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+end_src

*** Anaconda Mode

#+begin_src sh
pip install jedi  # lightweight autocompletion
# flake8 for code checks
pip install flake8
# and importmagic for automatic imports
pip install importmagic
#+end_src

#+begin_src -no-tangle-emacs-lisp
  (use-package anaconda-mode
  :ensure t
  :init (add-hook 'python-mode-hook 'anaconda-mode)
        (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  :config (use-package company-anaconda
            :ensure t
            :init (add-hook 'python-mode-hook 'anaconda-mode)
            (eval-after-load "company"
              '(add-to-list 'company-backends '(company-anaconda :with company-capf)))))

  ;; PEP8 formatting
  (use-package py-autopep8
  :ensure t
  :config
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+end_src

** Web Mode
[[http://web-mode.org/][web-mode]] is by far the best major mode I have found for editing HTML.

